/*
 * assignedSitePickerGenerator(id, currentSiteName, $scope)
 * Instantiates a view and a controller for picking a site
 * Pre: - id is a valid person and currentSiteName is an active site
        - warn user if:
           - id is a driver with passengers
        -
 * Post: - if id is being checked out:
            - id's isCheckedIn is set to 0
            - id's assignedToProject, assignedToSite, assignedToDriver_id are all set to null
            - if id is a driver:
              - id's driverStatus is set to null
              - id is deleted from $scope.drivers
              - a modal asks the user to decide whether to leave id's passengers checkedIn
              - id's passengers' assignedToDriver_id are set to null
            - if id is a passenger, they are spliced from their driver's passengers arr
            - id is spliced from the appropriate projectSitesWithPersons arr
         - if id's site assignment is being removed:
            - id's assignedToSite_id is set to null
            - id is spliced from their sites projectSitesWithPersons arr
            - id is pushed to the appropriate projectsWithPersons arr
         - if id's project assignment is being removed:
            - id's assignedToSite_id and assignedToProject are set to null
            - id is spliced from their site's projectSitesWithPersons arr
            - id is pushed to projectsWithPersons[all] arr
 */
app.factory('assignedSitePickerGenerator', ['$mdBottomSheet', '$log', '$q', '$mdToast', function($mdBottomSheet, $log, $q, $mdToast) {

  return function(id, currentSiteName, $scope) {
    var myId = id

    var defer = $q.defer()

    return $mdBottomSheet.show({
      templateUrl: 'app/modalTemplates/assignedSitePickerSheetTemplate.html',
      controller: 'AssignedSitePickerSheetController',
      scope: $scope,
      preserveScope: true,
      locals: {
        parentScope: $scope,
        id: myId,
        currentSiteName: currentSiteName
      },
      parent: angular.element(document.body)
    })
  }
}])

/*
 * AssignedSitePickerSheetController
 * Controls site picker bottom sheets for editing assignments in the Assigned tab, generated by assignedSitePickerGenerator
 */
app.controller('AssignedSitePickerSheetController', ['$scope', '$log', '$mdBottomSheet', 'getActiveSites', '$rootScope', 'updateCheckedIn', 'checkOut', 'id', 'currentSiteName', 'assignToDriver', 'driverStatus', 'parentScope', function($scope, $log, $mdBottomSheet, getActiveSites, $rootScope, updateCheckedIn, checkOut, id, currentSiteName, assignToDriver, driverStatus, parentScope) {

  $scope.id = id

  $scope.removeSiteAssignment = function () {
    $mdBottomSheet.hide('removeSiteAssignment')
  }

  $scope.removeProjectAssignment = function () {
    $mdBottomSheet.hide('removeProjectAssignment')
  }
  $scope.checkOut = function () {
    $mdBottomSheet.hide('checkOut')
  }

  // var myParentScope = parentScope
  // $scope.id = id
  // $scope.currentSiteName = currentSiteName
  //
  // /*
  //  * removeAssignment
  //  * Removes a persons assigned site and/or project. The values to update are specified by the three boolean parameters
  //  * Pre: removeSite, removeProject, and calledByCheckOut are bools set in assignedSitePickerSheetTemplate
  //  * Post: - if id is being checked out:
  //             - id's isCheckedIn is set to 0
  //             - id's assignedToProject, assignedToSite, assignedToDriver_id are all set to null
  //             - if id is a driver:
  //               - id's driverStatus is set to null
  //               - id is deleted from $scope.drivers
  //               - a modal asks the user to decide whether to leave id's passengers checkedIn
  //               - id's passengers' assignedToDriver_id are set to null
  //             - if id is a passenger, they are spliced from their driver's passengers arr
  //             - id is spliced from the appropriate projectSitesWithPersons arr
  //          - if id's site assignment is being removed:
  //             - id's assignedToSite_id is set to null
  //             - id is spliced from their sites projectSitesWithPersons arr
  //             - id is pushed to the appropriate projectsWithPersons arr
  //          - if id's project assignment is being removed:
  //             - id's assignedToSite_id and assignedToProject are set to null
  //             - id is spliced from their site's projectSitesWithPersons arr
  //             - id is pushed to projectsWithPersons[all] arr
  //  */
  // $scope.removeAssignment = function(removeSite, removeProject, calledByCheckOut) {
  //
  //   // resolve bottom sheet with removeSite, removeProject, or checkOut
  //
  //   var confirmDefer = $q.defer()
  //   var confirmPromise = confirmDefer.promise
  //   if (!calledByCheckOut) {
  //     if (myParentScope.persons[id].driverStatus == 'isDriver' || myParentScope.persons[id].driverStatus == 'isTeerCarDriver' || myParentScope.persons[id].driverStatus == 'isVanDriver') {
  //       // show dialog asking if id's passengers should have the same change made to their assignment or stay where they are assigned, and if so, if they should stay assigned to this driver
  //
  //
  //     }
  //     else if (myParentScope.persons[id].assignedToDriver_id != null && myParentScope.persons[id].assignedToDriver_id != '') {
  //       // ask if this person should be unassigned from their driver, or stay with them
  //     }
  //     else {
  //       confirmPromise.reject()
  //     }
  //   }
  //   else if (calledByCheckOut) {
  //     if (myParentScope.persons[id].driverStatus == 'isDriver' || myParentScope.persons[id].driverStatus == 'isTeerCarDriver' || myParentScope.persons[id].driverStatus == 'isVanDriver') {
  //       // show dialog asking user if id's passengers should stay checked in and assigned to this site
  //     }
  //     else {
  //       confirmPromise.reject()
  //     }
  //   }
  //
  //   valuesToUpdate = {
  //     "id" : $scope.id,
  //     "carpoolSite" : $rootScope.myCarpoolSite, // <-- not exactly sure why we are re-setting this; can't think of when it would change or need to be re-set
  //     "site" : "NULL"
  //   }
  //
  //   if (removeProject) {
  //     valuesToUpdate["project"] = "NULL"
  //   }
  //
  //   updateCheckedIn($scope.id, valuesToUpdate).then(function success () {
  //
  //     // -- Update persons containers
  //     if (removeSite) {
  //       $log.log('id of person to remove assignment is ' + $scope.id)
  //       var site = myParentScope.persons[$scope.id].assignedToSite_id
  //       $log.log('site to remove is ' + site)
  //       var index = myParentScope.projectSitesWithPersons[site].indexOf($scope.id)
  //       myParentScope.projectSitesWithPersons[site].splice(index, 1)
  //       myParentScope.persons[$scope.id].assignedToSite_id = ''
  //
  //       var project = myParentScope.persons[$scope.id].assignedToProject
  //       myParentScope.projectsWithPersons[project].push($scope.id)
  //     }
  //
  //     if (removeProject) {
  //       var project = myParentScope.persons[$scope.id].assignedToProject
  //       var index = myParentScope.projectsWithPersons[project].indexOf($scope.id)
  //       myParentScope.projectsWithPersons[project].splice(index, 1)
  //       myParentScope.persons[$scope.id].assignedToProject = 'all'
  //       myParentScope.projectsWithPersons['all'].push($scope.id)
  //     }
  //
  //     // if this function was not called by checkOut, we are done; hide the $mdBottomSheet with the action that we executed
  //     if (!calledByCheckOut) {
  //       if (removeProject && removeSite) {
  //         $mdBottomSheet.hide('siteAndProject')
  //       } else if (removeSite) {
  //         $mdBottomSheet.hide('site')
  //       } else if (removeProject) {
  //         $mdBottomSheet.hide('project')
  //       }
  //     }
  //   })
  // }
  //
  // $scope.checkOut = function() {
  //   $scope.removeAssignment(true, true, true)
  //
  //   var index = myParentScope.projectsWithPersons['all'].indexOf(id)
  //   myParentScope.projectsWithPersons['all'].splice(index, 1)
  //   myParentScope.persons[id].assignedToProject = ''
  //   myParentScope.persons[id].assignedToSite_id = ''
  //   myParentScope.persons[id].isCheckedIn = ''
  //
  //   if (myParentScope.persons[id].assignedToDriver_id) {
  //     var driver = myParentScope.persons[id].assignedToDriver_id
  //     var passengerIndex = myParentScope.drivers[driver].passengers.indexOf(id)
  //     myParentScope.drivers[driver].passengers.splice(passengerIndex, 1)
  //     myParentScope.persons[id].assignedToDriver_id = ''
  //     assignToDriver(id, '')
  //   }
  //
  //   myParentScope.registeredPersons.push(id)
  //
  //   $mdBottomSheet.hide('checkOut')
  // }

}])
